[["index.html", "GEO77_R_Introduction Preface", " GEO77_R_Introduction Mathias Bellat, Nicolas Riveràs Munoz 2022-11-16 Preface This is an introduction course to R language applied for Physical Geographical science in GEO77 teaching. This course will help you with the basis of R language and first uses of Machine Learning. General info: Name and email: Mathias Bellat Ph.D candidate, SFB1070 ResourcesCultures, Working group geomorphology and soil sciences. Email : mathias.bellat@uni-tuebingen.de and nicolas-andres.riveras-munoz@uni-tuebingen.de Dates: 22/11, 29/11, 6/12 and 13/12 Language: English, German (only for specific questions). Resources: In the “Reference chapter” and on the ILLAS webpage GEO77 with the password “SoilScience”. Objectives: Get basic of R language under RStudio, different type of features, writing an algorithms, importing and exporting data. Realizing basic Machine Learning operation (Decision tree, CART…). Produce maps after geotreatments for specifics cases ( digital soil mapping… ). "],["r-introduction-course.html", "Chapter 1 R Introduction Course 1.1 General introduction 1.2 Resources 1.3 Installing R and dependencies 1.4 First overview of R 1.5 RStudio Environment 1.6 Exercices 1.7 Additionnal Ressources", " Chapter 1 R Introduction Course 1.1 General introduction 1.1.1 Short history and philosophy of R R is a free and open source system developed from the beginning of the 1990’s by Ross Ihaka and Robert Gentleman at the Auckland University (1993). In 1996 they published the first paper on R language (Ihaka and Gentleman 1996) named : Ross Ihaka and Robert Gentleman. R:“A language for data analysis and graphics.” Journal of Computational and Graphical Statistics, 5(3):299–314, 1996, and in 1997 started the R Core Group/Team a team of statisticians and computer scientists. They released in 2000 the first public released version of R (1.0.0). In addition to this, the Comprehensive R Archive Network or CRAN where the R code is stored, as also hosted additional package from users. On the 03/10/2022 more than 20,000 packages where stored on the CRAN against 200 in 2003 and 9,000 in 2015 (Tippmann 2015). Another important part of R is it free-user dimension. The developed of this language why highly inspired by a previous language the S. Developed by John Chambers in the Nokia Bell Laboratory during the 1970’s it was designed by and for data scientists and not programmers. The philosophy of a freely accessible software for everyone quickly developed and can be described as : “[W]e wanted users to be able to begin in an interactive environment, where they did not consciously think of themselves as programming. Then as their needs became clearer and their sophistication increased, they should be able to slide gradually into programming, when the language and system aspects would become more important.” John Chambers However, the S language was unclear for many users and it lead to the development of the R language in the 1990. In 1995, following this “S philosophy”, R. Ihaka and R. Gentleman adopted the GNU General Public Licence for the R language. This licence gives free uses to any users for the code. Version 2, June 1991 Copyright (C) 1989, 1991 Free Software Foundation, Inc. 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA Everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed. GNU General Public Licence More broadly the GNU (development of a freely accessible software ), founded by Richard Stallman, follows the Free Software Foundation policies : “The freedom to run the program, for any purpose (freedom 0).” “The freedom to study how the program works, and adapt it to your needs (freedom 1).”Access to the source code is a precondition for this.” “The freedom to redistribute copies so you can help your neighbor (freedom 2).” “The freedom to improve the program, and release your improvements to the public, so that the whole community benefits (freedom 3). Access to the source code is a precondition for this.” Free Software Foundation Figure 1.1: Short history of R from Giorgi, Ceraolo, and Mercatelli (2022). A more detailed history of R development and first objectifs 1.1.2 Why R? It is hard to answer this question in one sentence. But several points can be raised : The non-cost of this software compared to heavy ones from other platforms. The high number of packages developed and freely available allowing more and more analysis in many field of applications. As depicted in Tippmann (2015) the idea of knowing “what you are doing to your data” and not having a black box treatment of your data. Mastering the whole chaine opératoire from the cleaning of your raw data to the publishing of reports or graphics. Allows others to see your code and treatment “the reproducibility of the experiment”. One of the most used programming language, in the top 20 of the TIOBE Index for many years. Figure 1.2: Number of publication quoting R (Tippmann 2015). 1.2 Resources The R community is well developed online and you can found many resources on several websites. For the basics resources you have: https://cran.r-project.org/: R original deposit of the CRAN. https://rstudio.com/products/rstudio/: Rstudio the most commly used IDE for R. https://Github.com: GitHub a website with developers codes and packages freely accessible. Also some topics about issues and bug in R. To solve coding problems and bugs: https://r-grrr.slack.com/ Slack of this users (question/answers, actuality…). https://www.r-bloggers.com/ R-bloggers https://stackoverflow.com/questions/tagged/r/ Stackoverflow (very useful). 1.3 Installing R and dependencies 1.3.1 R and Rstudio First you will need to install R on https://cran.r-project.org/. Choose the fitted version for your computer system. Figure 1.3: R software view. Then you will need an Integrated Development Environment (IDE) which allows you to have a more comprehensive overview and easier access to packages and other online features from R. The most commonly used IDE fro R is Rstudio. You can download it via https://rstudio.com/products/rstudio/download/#download, select the free version for you exploitation system. Figure 1.4: RStudio IDE view. 1.3.2 R Packages If R already handle may data the true power of this language is to have more than 10 000 additional packages freely available online. Most of them can be directly download on the CRAN website while others will be accessible only via their GitHub deposit. To download the package you have several different solutions: The easiest way is using the Package windows of Rstudio and directly download it from the CRAN deposit. You can also use the following code to download it install.packages(\"\") If the package is not available on the CRAN deposit you can directly download it from the GitHub site. You will need first to download the “remote” package to access online content. Then you can type the URL of the link to your package. install.packages(&quot;remotes&quot;) #install &quot;remotes&quot; package. devtools::install_github(&quot;philipp-baumann/simplerspec&quot;, force = FALSE) # The &quot;force&quot; parameter as to be put on TRUE or FALSE depending if you want to overwritte your previous download of the package Last but not least, you can manually download the .zip or .tar.gz of the package online and unpacked it via the package windows of Rstudio or directly to your R folder (1.5) Once you download the package you have to load it to your environment. You can do it with the line library() , you will have to do it every time you start a new session in R. Figure 1.5: RStudio Pakage window view. 1.4 First overview of R 1.4.1 Basic commands You can open a new R window to start typing some code. R is based for statistical treatment so number and operation are one of the most important component of this language. You can type basic operation to get familiar with the syntax: &gt; 2+3 [1] 5 &gt; 2*3 [1] 6 &gt; 2^3 [1] 8 Special operators can also be used &gt; pi [1] 3.141593 &gt; sqrt(2) [1] 1.414214 For letters and other characters you can use the print()command. It does work for special operators but not if several are used at the same time. &gt; print(&quot;Hello World&quot;) [1] &quot;Hello world&quot; &gt; print(pi) [1] 1.414214 &gt; print(&quot;The zero occurs at&quot;, 2 * pi, &quot;radians.&quot;) Error in print.default(&quot;The zero occurs at&quot;, 2 * pi, &quot;radians.&quot;): invalid &#39;quote&#39; argument To be able to use both numeric or special operators and characters use the cat() command. You need to end it with the \"\\n\" code. &gt; cat(&quot;The zero occurs at&quot;, 2 * pi, &quot;radians.&quot;, &quot;\\n&quot;) The zero occurs at 6.283185 radians. Figure 1.6: R basic commands. An important topic is the help() command (in Rstudio ? can also work). This function will give access to the helping and description page of the command you are typing inside the strings. With an internet connection on Rstudio the ?? line will give you information on your command even if it is coming from a non downloaded package. Figure 1.7: R help window after typing the help(c) command. 1.4.2 Setting variables Analyzing data is important but if we can not store them we won’t be able to go very far. You can store any variable with the &lt;- or = code. The most important variables are numbers and character string. &gt; x &lt;- pi &gt; y = 2*2 &gt; print(x*y) [1] 12.56637 Numerical values On the upper code line it is a number variable storage (Numeric values). &gt; a &lt;- &quot;The zero occurs at&quot; &gt; b = &quot;radians.&quot; &gt; cat(a, 2 * x, b, &quot;\\n&quot;) The zero occurs at 6.283185 radians. Character values On the upper code line it is two character string variables storage (Character values) combined with a number variable. We can also give a vector several numbers (Vector of numbers) or several characters (Vector of character strings) with the code line c(). &gt; a &lt;- c(&quot;Red&quot;, &quot;Blue&quot;, &quot;Green&quot;, &quot;Black&quot;, &quot;White&quot;) &gt; b &lt;- c(5, 6, 6, 8, 11) &gt; print(a) [1] &quot;Red&quot; &quot;Blue&quot; &quot;Green&quot; &quot;Black&quot; &quot;White&quot; &gt; b [1] 5 6 6 8 11 Useful commands You have to distinguish the class of a data from it’s mode. The class ca be seen as the structure of the data while the mode is just the “type” of data. In simple vector their is no difference but on more complex object you will specific *class will be adopted their structure (matrices, arrays…) while their data will be related to one mode (numeric, character, logical…) To know the class** of your variable you can use the class()command and to know the mode (type of info stored) the mode(). The str() function will gives you more information about the data and the class of it. &gt; str(a) [1] chr [1:5] &quot;Red&quot; &quot;Blue&quot; &quot;Green&quot; &quot;Black&quot; &quot;White&quot; &gt; class(b) [1] &quot;numeric&quot; &gt; mode(print) [1] &quot;function&quot; Two other important command are ls() which gives you your number of saved variable and rm() which remove one variable. ls.str() is a transformed way to see the content of each variables and not only there name. You can remove all your variable by making rm(list = ls()). The c(1:10) used here give a vector list of ten numbers from 1 to 10. The : function create a sequence of numbers. &gt; y &lt;- 3 &gt; y &lt;- &quot;Red&quot; &gt; z &lt;- c(1:10) &gt; ls() [1] &quot;x&quot; &quot;y&quot; &quot;z&quot; &gt; ls.str() x : num 3 y : chr &quot;RED&quot; z : int [1:10] 1 2 3 4 5 6 7 8 9 10 &gt; rm(list = ls()) &gt; ls() character(0) To generate more “complex” sequence you can use the seq(x, y, n) function where x is the starting number, y is the ending number and n is the interval. If you want to create a sequence with a specific number of intervals you can use the length.out = argument before n. &gt; seq(2, 50, 4) [1] 2 6 10 14 18 22 26 30 34 38 42 46 50 &gt; seq(2, 50, length.out = 4) [1] 2 18 34 50 Matrices and Arrays You can combine vectors together in order to create matrices in the first time. There are different way of combining them. When can combine the different vector numbers with c() and then give a specific dimension x,y to the combined vector with dim(x,y) command. Or we can directly combine the two vectors as different colons from one matrix with cbind(col1, col2) or if you prefer combining via the rows with rbind(row1, row2). A last possible way is via matrix(data, nrow = n, ncol = n). &gt; b &lt;- c(5, 6, 6, 8, 11) &gt; d &lt;- c(12, 3, 4, 5, 6) &gt; matrix &lt;- c(b,d) &gt; matrix [1] 5 6 6 8 11 12 3 4 5 6 &gt; dim(matrix) &lt;- c(2,5) # first the rows number then the columns number &gt; print (matrix) [,1] [,2] [,3] [,4] [,5] [1,] 5 6 11 3 5 [2,] 6 8 12 4 6 &gt; matrix &lt;- cbind(b, d) &gt; print(matrix) b d [1,] 5 12 [2,] 6 3 [3,] 6 4 [4,] 8 5 [5,] 11 6 &gt; dim(matrix) [1] 5 2 &gt; matrix &lt;- rbind(b, d) &gt; print(matrix) [,1] [,2] [,3] [,4] [,5] [1,] 5 6 11 3 5 [2,] 6 8 12 4 6 &gt; dim(matrix) [1] 2 5 &gt; class(matrix) [1] &quot;matrix&quot; &quot;array&quot; The type array is a multidimensional n vectors. We will prefer data frame format of list format for combining different types of data. However, if you want more precision on array data you can look into Long and Teetor (2019) pp.131 - 132 or Team, Venables, and Smith (2022). Factor values Another type of important data is the factor class. They are defined as a vector of enumerated values. Their is two type of factor the Grouping and the Categorical variables which we will see and use for ANOVA testing ((see?)). The specificity of the factor is they contains several levels (one for each type of factor). You can access the the levels with levels()to see their names or nlevels()to see the number of levels. Transformation You can force R to convert data from a previous class to another with the as.x() code were x is replaced by the format (data frame, numeric, character….). In our case here you can ask as.factor(). &gt; x &lt;- factor(c(&quot;TRUE&quot;,&quot;FALSE&quot;,&quot;TRUE&quot;,&quot;TRUE&quot;,&quot;FALSE&quot;,&quot;NO DATA&quot;,&quot;TRUE&quot;, &quot;FALSE&quot;)) &gt; class(x) [1] &quot;factor&quot; &gt; levels(x) [1] &quot;FALSE&quot; &quot;NO DATA&quot; &quot;TRUE&quot; &gt; a &lt;- c(&quot;Red&quot;, &quot;Blue&quot;, &quot;Green&quot;, &quot;Black&quot;, &quot;White&quot;) &gt; y &lt;- as.factor(a) &gt; nlevels(y) [1] 5 #one for each type of characters You can also order factors by adding the ordered = TRUE code inside the factor() function. This can be useful when sorting the data you are dealing. &gt; x &lt;- factor(c(&quot;TRUE&quot;,&quot;FALSE&quot;,&quot;TRUE&quot;,&quot;TRUE&quot;,&quot;FALSE&quot;,&quot;NO DATA&quot;,&quot;TRUE&quot;, &quot;FALSE&quot;)) &gt; sorted &lt;- factor(x, ordered = TRUE, levels = c(&quot;NO DATA&quot;, &quot;FALSE&quot;, &quot;TRUE&quot;)) &gt; sorted [1] TRUE FALSE TRUE TRUE FALSE NO DATA TRUE FALSE Levels: NO DATA &lt; FALSE &lt; TRUE Lists and data frames Two very common type of data type we will see here are List and Data Frame. A list can be see as a collection of object. They can be from different mode and size without any restriction except having different name. The Data Frame (more broadly used in Data Science) can be seen as a specific type of list with two conditions : All elements of a data frame are vectors. All elements of a data frame have an equal length. For a list you can type the list() code. It can bee seen as list(name_1=object_1, …, name_m=object_m). The data frame is similar with data.frame() following the same development as the list() function. If you try to create a data frame with unequal number between vector it will notice it. &gt; Lst &lt;- list(name=&quot;Fred&quot;, wife=&quot;Mary&quot;, no.children=3, child.ages=c(4,7,9)) &gt; str(Lst) List of 4 $ name : chr &quot;Fred&quot; $ wife : chr &quot;Mary&quot; $ no.children: num 3 $ child.ages : num [1:3] 4 7 9 &gt; &gt; df &lt;- data.frame(id=1:3, name=c(&quot;Moe&quot;, &quot;Larry&quot;, &quot;Curly&quot;), age=c(1:3)) &gt;str(df) &#39;data.frame&#39;: 3 obs. of 3 variables: $ id : int 1 2 3 $ name: chr &quot;Moe&quot; &quot;Larry&quot; &quot;Curly&quot; $ age : int 1 2 3 &gt; &gt; df &lt;- data.frame(id=1:3, name=c(&quot;Moe&quot;, &quot;Larry&quot;, &quot;Curly&quot;), age=c(1,2)) Error in data.frame(id = 1:3, name = c(&quot;Moe&quot;, &quot;Larry&quot;, &quot;Curly&quot;), age = c(1, : arguments imply differing number of rows: 3, 2 This example is from the Team, Venables, and Smith (2022) book. Logical and Integer values You have also logical value that can be “TRUE”, “FALSE” or “NULL”. You create them with a vector command and then T, F or N without strings c(T,F,F,N). Their are useful values for logical compare between two variables (See vector operator). Integer values can also be created by adding the as.integer code on a numerical vector. By default numerical values are non integer in R. &gt; x &lt;- c(T,F,T,F,T,N) &gt; class(x) [1] &quot;logical&quot; &gt; y &lt;- 2000 &gt; 2022 &gt; class(y) [1] &quot;logical&quot; &gt; b &lt;- c(5, 6, 6, 8, 11) &gt; b_int &lt;- as.integer(b) #Integer will truncated toward zero non integral number and imaginary part of complex numbers will be discarded. &gt; class(b_int) [1] &quot;integer&quot; Table 1.1: Object mode maping in R (From Long and Teetor (2019)). Object Example Mode Number 3.1415 Numeric Vector of numbers c(2.7.182, 3.1415) Numeric Character string “Moe” Character Vector of character strings c(“Moe”, “Larry”, “Curly”) Character Factor factor(c(“NY”, “CA”, “IL”)) Numeric List list(“Moe”, “Larry”, “Curly”) List Data frame data.frame(x=1:3, y=c(“Moe”, “Larry”, “Curly”)) List Function print() Function Logical values c(T,F,F,F,T,T) Logical 1.5 RStudio Environment 1.5.1 Project When you are opening a new project create a new project in the tab File and then create a R script in new file in the tab File. Choose carefully your project folder because it will be more complicate to move it later on. Treeing The organization of the folder is also really important you can read this blog (https://www.inwt-statistics.com/read-blog/a-meaningful-file-structure-for-r-projects.html) about the organisation of a project folder and look the snapshot below 1.8. Figure 1.8: R project folder structure. You have several way of controlling your folder location with getwd() and setting a new one with setwd(). The formula ./ will automatically call the project folder. Note that when your a calling any path into R you will need / and not \\ as commonly used in windows or other programming language (Cf. Latex) Saving data For saving your working space you have two ways: Either exporting one by one your file to specific formats (.csv, .jpg, .shp….) as we will see later. Saving via a .Rdata the file is more easily readable on R. You can save only one or multiple elements save(list = c(\"x\",\"y\"), file = \"output.RData\") or the all environment of your project save.image(file = \"output.RData\"). 1.6 Exercices Calculate the following equation with R and copy the code lines: \\[ x = (2*4-4)^2 + \\sqrt(9) \\] Solve the following equation rounded at 3 digit (if necessary) by using the quadratic formula : $$ -5x^2 - 6x + 11 = 2 \\[ For reminder the quadratic formula : \\] ax^2 + bx + c = 0 $$ \\[ x = \\frac{-b \\pm \\sqrt{b^2 - 4ac}}{2a} \\] Create 5 vectors (minimum length 3) from different classes. Name them after their class name and export them as a list in a RData file named Exercise_R_01 Give the objects class, variable mode and number, and observation number of the data rocks , trees and iris. These data are including in R basic package and you can call them as any stored variable. 1.7 Additionnal Ressources Here you will find videos or links for additional material. Philosophy of R and free software https://www.youtube.com/watch?v=jk9S3RTAl38 : John Chambers interview on the R and S language philosophy and origin. https://www.youtube.com/watch?v=Ag1AKIl_2GM : Richard Stallman TEDx on the free softwares. John M. Chambers, “S, R and Data Science”, The R Journal, 12:1, 2020, pp. 462-476. Chamber, John M., Programming with Data: A Guide to the S Language, Springer, 1998. History of R language Becker, Richard A., A Brief History of S, Murray Hill, New Jersey: AT&amp;T Bell Laboratories, 2015. https://www.youtube.com/watch?v=Uey45MSg8Y4 : Peter Dalgaard conference on history of R in CeleBration 2020 in Copenhagen, 2020. https://www.youtube.com/watch?v=qWG_MLrxKps&amp;t :John Chambers talk about S, R and Data Science short history, 2021. Why R? https://www.youtube.com/watch?v=4lcwTGA7MZw&amp;t : Short presentation on R pros and cons compared to python. Giorgi, Frederico, Ceraolo Carmine, Mercatelli Daniele, “The R Language: An Engine for Bioinformatics and Data Science”, Life, 12, 648, 2022. Formation online Basic an quick online course (4 - 6 hours) : https://courses.cognitiveclass.ai/courses/course-v1:CognitiveClass+RP0101EN+v1/course/ More developed course about many uses of R (8 - 10 hours) : https://learning.edx.org/course/course-v1:HarvardX+PH125.1x+1T2022/home References "],["data-treatment-overview-analyse-and-programming-basics.html", "Chapter 2 Data treatment, overview, analyse and programming basics 2.1 Data managment 2.2 Vector operation 2.3 Export your data 2.4 Exercices", " Chapter 2 Data treatment, overview, analyse and programming basics 2.1 Data managment In this part we will see how to import data sets from various nature, clean them, organised then and showing the essential info about them. These treatments will be possible with additional packages dplyr and tidyverse. 2.1.1 Load data If importing data seams simple in other software it can be more tricky under R. We will see here how to import more common data such as .txt, .csv or .excel. For the raster and shapefile data that we might use later see. Data cleaning R is a really powerful tool and you can perform any transformation, cleaning or import. BUT, R is time consuming, even for senior users, for any kind of treatment. For beginners it might take hours to find a solution to prepare your data set as wanted. Therefore, we will advice you to always prepare your data before in more “user friendly” software as Excel or Open office solution. Included data and folder scaning First you can load data already included in the R environment and different packages. To do so you can check all data available with data() and then call them with data(name) and the dataset will be load. If the Rstudio IDE with the Files windows give you an overview of your project folder and files you can do it manually via list.files() and even add the parameter path = \"foldername\" or pattern = \"\\\\.filetype\" to precise the folder location or the type of data you want to look at. .txt, .csv and .xlsx files For a reading a .txt file register in a delimited format (“,”, “;”, TAB …) you can use the read.delim(\"filename\") code with this additional parameters header = TRUE or FALSE if you have header. sep = \"x\" To choose your delimiter in you file, x can be or tab, ,* for comma or ; for semicolon. You can also set your decimal separation with dec = \"x\". For reading a .csv file you will use the read.table(\"filename\")which is quite similar from read.delim. You have some other additional parameters such as na.strings = \"NA\" to choose what to put in the row with NA value (We strongly advice to leave it on NA). skip = ncan be used to skip a n number of lines before reading the data. And finnaly the .xlsx can be read via the read.xlsx code from the openxlsx package. It allows you to select one specific sheet in the file with the name of the sheet in seconde position after the name of the file as read.xlsx(\"filename\", \"sheetname or sheetindex\"). there is some change in the structure of additionnal parameters as seen before. startRow = n defines the line where you begin to read the data, and sep.names = \"\" is for specify the delimiter characters. &gt;data(iris) &gt; sample_data &lt;- read.delim(&quot;./Data/LUCAS-SOIL-2018.txt&quot;, header = TRUE, sep = &quot;,&quot;) &gt; sample_loc &lt;- read.table(&quot;./Data/Soil_sample_location.csv&quot;, header = TRUE, sep = &quot;;&quot;) &gt; ls() [1] &quot;iris&quot; &quot;sample_data&quot; &quot;sample_loc&quot; 2.1.2 Overview on data First we will load our first data that we will use during the class session within palmerpenguins packages. To load the data make install.package(\"palmerpenguis\") then load he package with library(palmerpenguis) and load the data with data(penguins). You have 6 essential command for having an overview of your data set : The most important is str() it will give you the class of the object and also from its vectors with some of their data. The head() command will give you the columns names and the first lines of the data set. The tail() command will give you the columns names and the last lines of the data set. The ncol() command will give you the number of columns. The nrow() command will give you the number of row in the data set. The summary() command will give you the basic statistical information about your data (mean, median…). 2.1.3 Select data You can select your data by column in two ways : By columns position df[n1] and if you want to select more df[c(n1, n2 ...)]. By columns name df[\"name\"] and if you want to select more df[c(\"name1\", \"name2\" ...)]. If you forget the c() it will give a specific row and column number. List and data frame selection For a list you will need to put two [[]] for selection. For data frame a better way for selection a specific column is by using df$name command. You can also select specific row with df[n1,] and df[c(n1,n2),] for multiple selections. 2.1.4 Remove or add data If you want to remove data from your data set you can either filter (see later) or just remove a entire row or column. For removing columns df[,-c(x1, x2...)] and for removing rows df[-c(x1, x2...),]. If you want to remove by name it is more complicated you have to use df[ , ! names(df) %in% c(\"name1\", \"name2\")] or the subset(df, select = - c(name2, name2)). You have also more easy solution with the dplyr package. If you want to add new data to your data set you have two different ways : With the classical R function rbind(df1, df2) to add rows to your data and cbind(df1, df2) for adding columns. But be careful with this method you can also combine data sets with the same amount of columns for rbind()and row for cbind() otherwise it will display an error message. The second way is more powerful it is the merge(df1, df2, by =) function. The by = variable will be your columns name or if you want merge others columns then put the value by = \"row.names\". Then it will depend if you want to keep all your data even the one with no measurement you will have to add the parameter all = TRUE . Otherwise, if you want a cross result to already filter you data you can leave it without this parameter (default is FALSE). NAs values Another important point is the NAs values which are missing value (Very very common !). You can spot them with is.na(df) which give you a list of binary answer, true and false to the question “is this a missing value?”. You can also see how many NAs you have with the command sum(is.na(df) == TRUE). To treat this missing value you have two solutions. First you can simply removed them with na.omit(df) but it will removed the related rows. Another solution that can be really useful is to replace this NAs values by a specific value or value. You can use this line of code df[is.na(df)] = x where x is a variable of the class of the column, it can be a number as 0, -9999 or a text, factor… You can do the same with the NULL variables and the is.null() function. You can also replace any values by another with replace(df, y, x) where y is the operator (see below) to be replace and x is the value of replacement. For example you can use replace(df, df &lt; 0, 0) will give zero value to all negative data. You can also replace it by any kind of value (eg. mean, median…). Attention for replacing a NA value by the mean of any calculation on the variable column, you will need to remove put aside the NA from this colom when doing it. Therefore, you have to use the na.rm = TRUE parameter after your calculation (mean(), min(), median(), max()…). 2.2 Vector operation Operators are very useful to filter or even to compare data to each another and also for basic programming of function creation. Without any package R allows several vector operations listed below. Table 2.1: Operators in R. Operator Meaning == Is egal to? != Is not egal to? &gt; Grater than? &lt; Less than? &gt;= Greater than or equal to? &lt;= Less than or equal to? &amp; And | Or ! Not %in% Is found in? Form the Tidyverse package the “pipe” system is often used to optimized you code. Instead of filtering several time with different data set you can add the code %&gt;% to simplify you operator. 2.3 Export your data You can export you data set in many ways but the easiest are with the write.table(df, \"df.export\", dec = \"\", sep = \"\", row.names = , col.names = ) command. You have several parameters : the first one df is the name of your file inside the project while the \"df.export\" is the name you want to give to your file with its extension name (.txt. and .csv are the best choices). The sep = \"\" parameter will allows you to choose your delimiter for decimals number (either , or .), the sep = \"\" parameter will give the separator of your columns (; or , or tab with /t) and row.names = and col.names = are true or false parameters for keeping the columns names and row names inside your export. 2.4 Exercices Import and analyse the bodendaten_xy and bodendaten files into Rstudio. Merge the two file into bodendaten_final data frame (careful of the missing link). Remove the columns with no values. Put the texture classification (“Bodenart[…]”) as a factor. Fill the missing and wrong values (negative) in the data set : By the mean (of the variable) for the missing values and the negative values of Mg. By zero for the others negatives values in the data set. By 100 the “Gu[…]” values that are over 100 (it is the texture percentage). Export the result inside a “Final_data.Rdata” and a “Final_data.csv” with tab delimiter and header names. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
